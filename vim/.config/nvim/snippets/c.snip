snippet		exf
	exit(EXIT_FAILURE);
snippet		exs
	exit(EXIT_SUCCESS);
snippet		pe
	perror("$0");

snippet		once
alias		include-guard
options		head
abbr #ifndef ... #define ... #endif
	#ifndef ${1:#:SYMBOL}
	#define $1

	${0:TARGET}
	#endif /* $1 */

snippet ifdef-endif
abbr #ifndef ... #endif
	#ifdef ${1:#:TARGET}
	${0:TARGET}
	#endif /* $1 */

snippet ifndef-endif
abbr #ifndef ... #endif
	#ifndef ${1:#:DEBUG}
	${0:TARGET}
	#endif /* $1 */

# {{{ Printing
snippet pr
abbr	printf("...\n", ...);
	printf("${1}\n"${2});
# :g/\/\/\ prdbg$/d to clean them all
snippet		print_debug
alias		prd
options		head
	printf("%s:%d ${1:#:here}\n", __func__, __LINE__${2:#:}); // prdbg
snippet		print_debug2
alias		prd2
options		head
	fprintf(stderr, "%s:%d ${1:#:here}\n", __func__, __LINE__${2:#:}); // prdbg

# Print bits of integer
snippet prb
options head
alias	print-bits
	int i;
	for (i = 0; i < ${1:#:NB}; i++) {
		printf("%c", (${2:#:SRC} & (1 << i)) ? '1' : '0');
		if ((i + 1) % 16 == 0)
			printf("\n");
	}

# }}}

# {{{ Bitwise
# Set a bit
snippet		bws
# abbr |=
	|= (1 << ${0:BIT})

# Clear a bit
snippet		bwc
# abbr &=
	&= ~(1 << ${0:BIT})

# Toggle a bit
snippet		bwt
# abbr ^=
	^= (1 << ${0:BIT})

# Test a bit
snippet		bwtt
	& (1 << ${0:BIT})
# }}}

# {{{ Comments: clang, docstrings...
snippet cmret
	0 if success, -1 otherwise
snippet cmrete
	0 if success, -1 and sets errno otherwise

snippet		cformatm
options		head
	/* clang-format off */
	${0}
	/* clang-format on */
snippet		cformat
options		head
	/* clang-format ${0} */

snippet		cformat2
options		head
	// clang-format ${0}
snippet		cformatm2
options		head
	// clang-format off
	${0}
	// clang-format on

snippet doxygen_brief
alias doxbrief
options head
	/** @brief $0 */
# }}}

# {{{ fork
# Common
snippet		fork
options		head
abbr		fork()
	switch (child_pid = fork()) {
	case -1:
		perror("fork");
		exit(EXIT_FAILURE);
	case 0: {
		${0:TARGET}
		exit(EXIT_SUCCESS);
	}
	default:
		break;
	}

# Avoid race condition after fork with signals (see TLPI 24.4).
# Parent first.
snippet		fork_signal
options		head
	switch (child_pid = fork()) {
	case -1:
		perror("fork");
		exit(EXIT_FAILURE);
	case 0:
		/* Waits for parent signal */
		sigemptyset(&empty_mask);
		if (sigsuspend(&empty_mask) == -1 && errno != EINTR) {
			perror("sigsuspend");
			exit(EXIT_FAILURE);
		}

		${0:CHILD_ACTIONS}
		exit(EXIT_SUCCESS);
	default:
		${0:PARENT_ACTIONS}

		/* Awake child */
		if (kill(child_pid, SYNC_SIG) == -1) {
			perror("kill");
			exit(EXIT_FAILURE);
		}
		break;
	}
# }}}

# {{{ signals
snippet		sigaction_set
options		head
	struct sigaction sa;
	sa.sa_flags = ${1:0};
	sa.sa_handler = ${2:handler};
	sigaction(SIG${3:SEGV}, &sa, NULL);
	${0:TARGET}
snippet signal_handler_basic
options head
	static void ${1:handler}(int signum)
	{
		${0:TARGET}
	}
snippet signal_handler_siginfo
	static void ${1:handler}(int signum, siginfo_t *si, void *data)
	{
		${0:TARGET}
	}
# }}}

# {{{ waitpid
snippet		wpid
options		head
abbr		waitpid()
	int return_status;
	if (waitpid(child_pid, &return_status, 0) == -1) {
		perror("waitpid");
		exit(EXIT_FAILURE);
	}
# }}}

# {{{ Check return values and errors
snippet check_rc
alias ifnrc
options head
	if (rc == -1) {
		$0
		return -1;
	}
snippet perror_exit
options head
	perror("${1:function}");
	exit(EXIT_FAILURE);
snippet perror_return
options head
	perror("${1:function}");
	return -1;
# }}}

# {{{ Prepared macroses
snippet def_begins_with
	#define begins_with(haystack, needle) (strncmp((haystack), (needle), strlen((needle))) == 0)
snippet def_max
	#define max(a, b) ((a) > (b) ? (a) : (b))
snippet def_min
	# define min(a,b) ((a) < (b) ? (a) : (b))
snippet def_err_print
	#define err(fmt, args...) fprintf(stderr, "[${1:ERR}]: " fmt "\n", ##args)
snippet def_dbg_print
	#define dbg(fmt, args...) do { if (${2:DEBUG_ENABLED}) fprintf(stderr, "[${1:DBG}]: " fmt "\n", ##args); } while (0)
snippet def_array_size
	# define array_size(arr) (sizeof(arr) / sizeof((arr)[0]))
# }}}

# {{{ Common functions
snippet function_once
options head
	static short _once = 0;
	if (_once == 1) return;
	_once = 1;
snippet fn_strerror
options head
	const char *strerror_${1:name}(int errno_)
	{
		switch(errno_) {
			case ${0:E}:
				return "$0";
			default:
				return strerror(errno_);
		}
	}
snippet fn_print_usage
	void print_usage(const char *argv0)
	{
		printf("Usage: %s ${1}\n", argv0);
	}
snippet fn_int_from_bytes
	static int int_from_bytes(char *buf, int pos, int num)
	{
		 unsigned char tmp[num];
		 unsigned int acc = 0;
		 int i, t = 0;
		 for (i=0;i<num;i++)
			 tmp[i] = buf[(pos + i)];
		 for (i=0;i<num;i++)
			 acc += tmp[i] << (8 * i);
		 return acc;
	}
snippet fn_kbhit
options head
	static int kbhit(void)
	{
	  struct termios oldt, newt;
	  int ch;
	  int oldf;

	  tcgetattr(STDIN_FILENO, &oldt);
	  newt = oldt;
	  newt.c_lflag &= ~(ICANON | ECHO);
	  tcsetattr(STDIN_FILENO, TCSANOW, &newt);
	  oldf = fcntl(STDIN_FILENO, F_GETFL, 0);
	  fcntl(STDIN_FILENO, F_SETFL, oldf | O_NONBLOCK);
	  ch = getchar();
	  tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
	  fcntl(STDIN_FILENO, F_SETFL, oldf);
	  if (ch != EOF) {
		ungetc(ch, stdin);
		return 1;
	  }

	  return 0;
	}
# }}}

# {{{ GLib
snippet glfree
	g_free(${1});
	${1} = NULL;
# }}}

snippet check_root
alias ch_root
options head
	if (setuid(0) < 0) {
		perror("Must be root.");
		exit(EXIT_FAILURE);
	}

snippet any_key
options head
	printf("Press any key to continue...\n");
	getchar();

snippet check_dir
alias ch_dir
options head
	DIR* dir = opendir(path);
	if (dir) {
		closedir(dir);
		${1}
	else if (ENOENT == errno) {
		${2}
	} else {
		$0
	}
snippet check_file
alias ch_file
options head
	FILE *file;
	if ((file = fopen(path, "r"))) {
		fclose(file);
		${1}
	} else {
		$0
	}

snippet attribute
alias attr
options head
	__attribute__(($0))

# Quick workaround with CMake configure_file behavior:
# [1]: https://stackoverflow.com/questions/48464610/unexpected-result-from-cmakedefine-substitution
# [2]: https://cmake.org/cmake/help/latest/command/configure_file.html
snippet cmake_define0
options head
	#cmakedefine ${1} @$1@
	#ifndef $1
	#define $1	  0
	#endif // $1

# {{{ typedef
snippet typedef_struct
alias	tdstruct
options head
	typedef struct ${1:name}_s {
		$0
	} $1_t;

snippet typedef_enum
alias	tdenum
options head
	typedef enum {
		$0
	} ${1:name}_t;
# }}}
