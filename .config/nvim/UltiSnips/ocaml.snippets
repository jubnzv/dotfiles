snippet pr
Printf.printf "${0}\n";
endsnippet

snippet prd
Printf.printf "%s:%i: ${0}\n" __FILE__ __LINE__;
endsnippet

snippet prl
Printf.printf "`!p snip.rv = snip.basename`:`!p snip.rv='%d'%snip._end[0]`: $1\n" $2;
endsnippet

snippet be
begin
	${VISUAL}$0
end
endsnippet

snippet li
List.iter
  ${1:list}
  ~f:(fun ${2:e} -> $3);
endsnippet

snippet lfl
List.fold_left
  ${1:list}
  ~init:${2:[]}
  ~f:(fun acc ${3:v} -> ${0})
endsnippet

snippet uniq
let ${1:uniq} =
  let r = ref 0 in
  fun () -> incr r;
    !r
endsnippet

snippet fstartswith
let startswith s1 s2 =
  let len1 = String.length s1 and len2 = String.length s2 in
  if len1 < len2 then false
  else
    let sub = String.sub s1 0 len2 in
    String.equal sub s2
endsnippet

snippet fendswith
let endswith s1 s2 =
  let len1 = String.length s1 and len2 = String.length s2 in
  if len1 < len2 then false
  else
    let sub = String.sub s1 (len1 - len2) len2 in
    String.equal sub s2
endsnippet

snippet scid
(SIdentifier.Name.as_string (SIdentifier.get_id $0))
endsnippet

snippet schdr
(*
  This file is part of scilla.

  Copyright (c) 2018 - present Zilliqa Research Pvt. Ltd.

  scilla is free software: you can redistribute it and/or modify it under the
  terms of the GNU General Public License as published by the Free Software
  Foundation, either version 3 of the License, or (at your option) any later
  version.

  scilla is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along with
  scilla.  If not, see <http://www.gnu.org/licenses/>.
*)
$0
endsnippet

snippet scitstmt "Iterate through Scilla statements"
let rec ${1:iter_stmt} (s, _ann) =
  match s with
  | Bind (_id, ea) -> (* TODO: Handle expr *) ea
  | MatchStmt (_id, arms) ->
      List.fold_left arms ~init:[] ~f:(fun acc (_pattern, stmts) ->
          List.fold_left stmts ~init:[] ~f:(fun acc sa ->
              $1 sa |> List.append acc)
          |> List.append acc)
  | Load _
  | RemoteLoad _
  | Store _
  | MapUpdate _
  | MapGet _
  | RemoteMapGet _
  | ReadFromBC _
  | TypeCast _
  | AcceptPayment
  | Iterate _
  | SendMsgs _
  | CreateEvnt _
  | CallProc _
  | Throw _
  | GasStmt _ ->
      []
endsnippet

snippet scitexpr "Iterate through Scilla expressions"
let rec ${1:iter_expr} (e, _ann) =
  match e with
  | Literal _ -> []
  | Var (_id) -> []
  | Let (_id, _ty, lhs, rhs) -> $1 lhs @ $1 rhs
  | Message _ -> []
  | Fun (_id, _ty, body) -> $1 body
  | App (_id, _args) -> []
  | Constr _ -> []
  | MatchExpr (_id, arms) ->
    List.fold_left arms ~init:[] ~f:(fun acc (_pattern, ea) ->
      $1 ea |> List.append acc)
  | Builtin _ -> []
  | TFun (_id, body) -> $1 body
  | TApp _ -> []
  | Fixpoint (_id, _ty, ea) -> $1 ea
  | GasExpr (_, ea) -> $1 ea
endsnippet
