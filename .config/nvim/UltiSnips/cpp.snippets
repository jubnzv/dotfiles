snippet hdr
#include <algorithm>
#include <cassert>
#include <cstring>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

using namespace std;

$1
endsnippet

snippet exectime
{
	auto start__ = std::chrono::high_resolution_clock::now();
	${0:${VISUAL}}
	auto end__ = std::chrono::high_resolution_clock::now();
	std::cout << __func__ << ":" << __LINE__ << ": " << std::chrono::duration_cast<std::chrono::nanoseconds>(end__ - start__).count() << "ns" << std::endl;
}
endsnippet

snippet pr
std::cout << $1 << std::endl;
endsnippet

snippet prd
std::cout << __func__ << ":" << __LINE__ << " " << $1 << std::endl; // prdbg
endsnippet

snippet pre
std::cerr << $1 << std::endl;
endsnippet

snippet prv
for (auto const &vv : ${1:v})
	std::cout << vv << " ";
std::cout << std::endl;
endsnippet

snippet prm
for (auto const &m : ${1:M})
	std::cout << m.first << ":" << m.second << "${2:\n}";
std::cout << std::endl;
endsnippet

snippet inc
#include <${1:iostream}>
endsnippet

snippet oout1
friend std::ostream &operator<<(std::ostream &, const ${1:T} &);
endsnippet

snippet oout2
std::ostream &operator<<(std::ostream &os, const ${1:T} obj) {
  os << ${2:obj};
  return os;
}
endsnippet

snippet td
template <typename T> struct TD;
endsnippet

snippet tdu
auto ${2:t} = ${1:var};
TD<decltype($2)> t_type;
endsnippet

snippet sss
std::ostringstream ss;
ss << $0;
endsnippet

snippet tt
template <typename T>
endsnippet

snippet del
if (${1})
	delete $1;
$1 = nullptr;
endsnippet

snippet rr
const ${1:std::string} &
endsnippet

# -----------------------------------------------------------------------------
# Qt
# -----------------------------------------------------------------------------

snippet qpr
qDebug() << $1; // prdbg
endsnippet

snippet qpr1
qWarning() << __FILE__ << __LINE__; // prdbg
endsnippet

snippet qpr2
qWarning() << __FILE__ << __LINE__; // prdbg
${VISUAL}
qWarning() << __FILE__ << __LINE__; // prdbg
endsnippet

snippet qprt
qWarning() << __FILE__ << __LINE__ << QDateTime::currentMSecsSinceEpoch() ; // prdbg
endsnippet

snippet qsp
QString{"%1 %2"}.arg(__FILE__, QString::number(__LINE__))
endsnippet

snippet qmname
metaObject()->className()
endsnippet

snippet qtid
QThread::currentThreadId()
endsnippet

# Print hex
snippet qph
QString::number($1, 16)
endsnippet

snippet qprxe
QString str;
QTextStream stream(&str);
${1:root}.save(stream, 2);
qDebug() << str;
endsnippet

snippet qprmetamethods
for (int i = 0; i < ${1:metaObject()}->methodCount(); ++i) {
	const QMetaMethod m = $1->method(i);
	if (m.methodType() != QMetaMethod::Slot)
		qDebug() << "slot: " << m.methodSignature();
	if (m.methodType() != QMetaMethod::Signal)
		qDebug() << "signal: " << m.methodSignature();
}
endsnippet

snippet qexectime
{
	QElapsedTimer timer;
	timer.start();
	${0:${VISUAL}}
	qDebug() << "The operation took" << timer.elapsed() << "ms";
}
endsnippet

snippet qoout
friend QDebug operator<<(QDebug dbg, const ${1:T} &obj)
{
	dbg.nospace() << ${2:obj};
	return dbg;
}
endsnippet

# -----------------------------------------------------------------------------
# LLVM
# -----------------------------------------------------------------------------

snippet lpr
llvm::outs() << $1 << "\n";
endsnippet

snippet lpre
llvm::err() << $1 << "\n";
endsnippet

snippet lprty
std::string type_str;
llvm::raw_string_ostream rso(type_str);
${1:ty}->print(rso);
llvm::outs << "Type=" << rso.str() << "\n";
endsnippet

# -----------------------------------------------------------------------------
# Cppcheck
# -----------------------------------------------------------------------------

snippet cprp
std::cout << ${1:tok}->linenr() << ":" << $1->column() << std::endl;
endsnippet

# -----------------------------------------------------------------------------
# Misc.
# -----------------------------------------------------------------------------

snippet spr
spdlog::debug("${2:\{\}}", $1);
endsnippet

