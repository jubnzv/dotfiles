* Emacs configuration

This is my Emacs configuration file written as Org document.

I use Emacs mainly for note taking via org-mode. For convience, I tried to configure the usual keybindings from my neovim configuration.

Inspired by following setups and guides:

+ https://github.com/andreyorst/dotfiles/tree/master/.emacs.d
+ https://github.com/noctuid/evil-guide

** UI defaults

#+BEGIN_SRC emacs-lisp
(ignore-errors
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (fset 'menu-bar-open nil))
#+END_SRC

*** Font

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Iosevka-11")
#+END_SRC


** Fixing Emacs defaults

**** Bell

#+BEGIN_SRC emacs-lisp
    (setq ring-bell-function 'ignore)
#+END_SRC

**** Custom

#+BEGIN_SRC emacs-lisp
   (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
   (load custom-file :noerror)
#+END_SRC

**** Backups

#+BEGIN_SRC emacs-lisp
    (setq backup-by-copying t
        create-lockfiles nil
        backup-directory-alist '(("." . "~/.cache/emacs-backups"))
        auto-save-file-name-transforms '((".*" "~/.cache/emacs-backups" t)))
#+END_SRC


**** Use system clipboard
     
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
#+END_SRC

** Packages

*** Load package manager

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(when (not package-archive-contents) (package-refresh-contents))
#+END_SRC

*** Bootstrap use-package

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
#+END_SRC

*** Load use-package extensions
    
The :chords keyword allows you to define key-chord bindings for use-package declarations in the same manner as the :bind keyword.

#+BEGIN_SRC emacs-lisp
(use-package use-package-chords
  :ensure t
  :config (key-chord-mode 1))
#+END_SRC

** Global keybindings
   
*** Use C-s to save current buffer

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'save-buffer)  
#+END_SRC

*** Ace-jump mode

#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :ensure t ;; install the ace-jump-mode package if not installed
  :bind ("M-;" . ace-jump-mode))
#+end_SRC

** Evil mode

*** Bootstrap evil with use-package

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t ;; install the evil package if not installed
  :init     ;; tweak evil's configuration before loading it
  (setq evil-search-module 'evil-search)
  (setq evil-want-C-i-jump nil)         ;; fix TAB key behaviour in evil-org extension
  (setq evil-ex-complete-emacs-commands nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-shift-round nil)
  (setq evil-want-C-u-scroll t)
  :config   ;; tweak evil after loading it
  (evil-mode))
#+END_SRC

*** Evil keybindings
    
**** Map jj to leave insert mode

#+BEGIN_SRC emacs-lisp
(use-package key-chord
    :config
    (key-chord-define evil-insert-state-map "jj" 'evil-normal-state))
#+END_SRC

*** Setup for org-mode
    
#+BEGIN_SRC emacs-lisp
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+END_SRC
