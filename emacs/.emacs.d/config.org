# -*- mode: org; -*-

* About

This is my Emacs configuration file written as Org document.

** Resources

*** Guides
+ Emacs [[http://doc.endlessparentheses.com/][online documentation]] by endlessparentheses
+ Detailed [[http://doc.norang.ca/org-mode.html][org-mode guide]] by Bernt Hansen
+ [[https://github.com/noctuid/evil-guide][noctuid/evil-guide]]
+ Article: [[How to read Emacs Lisp][http://emacslife.com/how-to-read-emacs-lisp.html]]
+ Talk [[https://www.youtube.com/watch?v=gfZDwYeBlO4][Play Emacs like an instrument]] by Alain M. Lafon and his [[https://github.com/munen/emacs.d/][Emacs configuration]] written in org-mode
+ [[https://www.youtube.com/watch?v=GxMAPW9_LsA][2019-02-27: Emacs as a Python IDE - Sean Farley]] talk which demonstrate LSP and DAP usage for Python. See also: [[https://github.com/Emacs-SF/meetup-notes/blob/master/meetups/20190227.org#speaker-sean-farley][talk notes]] and [[https://bitbucket.org/seanfarley/dotfiles/src/default/][dotfiles]].

*** Dotfiles
+ [[https://github.com/caisah/emacs.dz][caisah/emacs.dz]] - Collection of emacs configuration files including interesting evil-mode setups.
+ [[https://github.com/noctuid/dotfiles][noctuid/dotfiles]]
+ [[https://github.com/IvanMalison/dotfiles/tree/master/dotfiles/emacs.d][IvanMalison/dotfiles]] (available in [[https://ivanmalison.github.io/dotfiles][readable format]])
+ [[https://github.com/kshenoy/dotfiles/blob/master/emacs.org][kshenoy/dotfiles]]

* Packages, Utilities and Basic Setup
** =straight.el=

#+begin_src emacs-lisp
(setq straight-repository-branch "develop"
      straight-use-package-by-default t)

;; Install and load straight.el
;; https://github.com/raxod502/straight.el#getting-started
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el"
                         user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  ;; (benchmark 1 `(load ,bootstrap-file nil 'nomessage))
  (load bootstrap-file nil 'nomessage))
#+end_src

** =use-package.el=

#+begin_src emacs-lisp
(straight-use-package 'use-package)

;; requiring use package is still necessary when loading a compiled file to be
;; able to alter `use-package-defaults' below; not requiring when loading a
;; compiled file doesn't seem to really affect startup time
;; (eval-when-compile
;;   (require 'use-package))
(require 'use-package)

(setq use-package-always-defer t)
#+end_src

** Load local modules
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
#+end_src

** Load use-package extensions
The ~:chords~ keyword allows you to define key-chord bindings for use-package declarations in the same manner as the =:bind= keyword.
#+begin_src emacs-lisp
(use-package use-package-chords
  :config (key-chord-mode 1))
#+end_src

** No Littering
Consistently sets the paths for various configuration, history, temporary, etc. files created by Emacs packages (e.g. =savehist-file=).
#+begin_src emacs-lisp
(use-package no-littering
  :demand t)
#+end_src

** Increase GC

Increasing GC is a common way to speed up Emacs. The [[https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][following post]] describes GC in details.

#+begin_src emacs-lisp
(defvar file-name-handler-alist-backup
        file-name-handler-alist)
(setq gc-cons-threshold
        most-positive-fixnum
      file-name-handler-alist nil)
(add-hook 'after-init-hook
  (lambda ()
    (garbage-collect)
    (setq gc-cons-threshold
            (car (get 'gc-cons-threshold 'standard-value))
      file-name-handler-alist
        (append
          file-name-handler-alist-backup
          file-name-handler-alist))))
#+end_src

* Essential keybindings: =general.el= and evil-mode
** =general.el=
=general.el= provides a more convenient method for binding keys in emacs.

#+begin_src emacs-lisp
(use-package general
  :straight (general
             :type git
             :host github
             :repo "noctuid/general.el")
  :demand t)

(general-auto-unbind-keys)

;; Generate key definition functions that are named similarly to vimâ€™s
(general-evil-setup)

(eval-and-compile
  (defalias 'gsetq #'general-setq)
  (defalias 'gsetq-local #'general-setq-local)
  (defalias 'gsetq-default #'general-setq-default))
#+end_src

#+begin_src emacs-lisp
(general-create-definer general-spc
  :states 'normal
  :keymaps 'override
  :prefix "SPC")

(general-create-definer general-m
  :states 'normal
  :prefix "m")
#+end_src

**** General options

#+begin_src emacs-lisp
;; quickly display current incomplete keystrokes in echo area
(gsetq echo-keystrokes 0.1)

;; a lot of unix tools expect this; it's required for the crontab, for example
(gsetq require-final-newline t)

;; new in emacs 26; kill running processes without confirmation on Emacs exit
(gsetq confirm-kill-processes nil)
#+end_src

** =evil-mode= and common keybindings
*** evil-mode
#+begin_src emacs-lisp
(use-package evil
  :init
  (gsetq evil-search-module 'evil-search
         ;; Vim keybinds behaviour
         evil-want-C-i-jump t
         evil-want-C-u-scroll t
         evil-want-Y-yank-to-eol t
         ;; Case-sensitive search
         evil-ex-search-case 'sensitive
         ;; Emacs commands (M-x) in Evil command mode
         evil-ex-complete-emacs-commands t
         ;; Clean highlight after the search
         ; evil-ex-search-persistent-highlight nil
         ;; Must be set before loading evil no matter what
         evil-want-keybinding nil
         ;; Windows behaviour
         evil-vsplit-window-right t
         evil-split-window-below t
         evil-shift-round nil)

  (evil-mode))
#+end_src

*** evil-collection
#+begin_src emacs-lisp
(use-package evil-collection)
#+end_src

Evil-numbers:
#+begin_src emacs-lisp
(use-package evil-numbers
  :general ('normal
            "C-a" #'evil-numbers/inc-at-pt
            "C-x" #'evil-numbers/dec-at-pt))
#+end_src

*** Set normal state everywhere
#+begin_src emacs-lisp
(gsetq evil-emacs-state-modes nil
       evil-motion-state-modes nil)
#+end_src

*** Cursors customization
#+begin_src emacs-lisp
(gsetq evil-insert-state-cursor '(bar "Gray"))
#+end_src

*** Essential keybindings
Here is most essential keybindings that available in every major mode.

**** Prevent [[https://web.eecs.umich.edu/~cscott/rsi.html##whatis][RSI]]

Disable some default keybindings to safe my arms. I got used them years before when first started with plain Emacs.
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-c") nil)
(global-set-key (kbd "C-x C-s") nil)
(global-set-key (kbd "C-x C-f") nil)

;; Window management is implemented by evil's <C-w>
; (global-set-key (kbd "C-x 1") nil)
; (global-set-key (kbd "C-x 2") nil)
; (global-set-key (kbd "C-x 3") nil)
; (global-set-key (kbd "C-x 4") nil)
; (global-set-key (kbd "C-x 5") nil)
#+end_src

**** Fix ~C-i~ behaviour
#+begin_src emacs-lisp
(define-key evil-normal-state-map (kbd "<C-i>") 'evil-jump-forward)
#+end_src

**** ~jj~ to leave insert mode:
#+begin_src emacs-lisp
(general-imap "j"
              (general-key-dispatch 'self-insert-command
                "j" 'evil-normal-state))
#+end_src

**** Common keybindings

#+begin_src emacs-lisp
(general-spc "xs"  #'save-buffer
             ;"h"   #'evil-ex-nohighlight
             "s"   #'save-buffer
             "xk"  #'kill-buffer
             "xc"  #'save-buffers-kill-terminal
             "SPC" #'counsel-M-x)
#+end_src

**** Basic refactoring functions
#+begin_src emacs-lisp
(general-spc "rs"  #'delete-trailing-whitespace)
#+end_src

**** Expand region

Increase selected region by semantic units (similar to [[https://github.com/terryma/vim-expand-region][vim-expand-region]]).
#+begin_src emacs-lisp
(use-package expand-region
  :config)

(evil-declare-key 'normal global-map "+" 'er/expand-region)
(evil-declare-key 'visual global-map "+" 'er/expand-region)
(evil-declare-key 'normal global-map "_" 'er/contract-region)
(evil-declare-key 'visual global-map "_" 'er/contract-region)
#+end_src

**** Killing buffers

See related [[https://www.emacswiki.org/emacs/KillingBuffers][EmacsWiki page]].

Kill all buffers, expect the current one:
#+begin_src emacs-lisp
(defun kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))

(general-spc "Ko" #'kill-other-buffers)
#+end_src

Kill all dired buffers:
#+begin_src emacs-lisp
(defun kill-all-dired-buffers ()
  "Kill all dired buffers."
  (interactive)
  (save-excursion
    (let ((count 0))
      (dolist (buffer (buffer-list))
        (set-buffer buffer)
        (when (equal major-mode 'dired-mode)
          (gsetq count (1+ count))
          (kill-buffer buffer)))
      (message "Killed %i dired buffer(s)." count))))
#+end_src

*** Avy

It works like [[https://github.com/easymotion/vim-easymotion][vim-easymotion]].
#+begin_src emacs-lisp
(use-package avy
  :config
  (global-set-key (kbd "M-;") 'avy-goto-char)
  (global-set-key (kbd "M-C-;") 'avy-resume))
#+end_SRC

*** Which-key mode

[[https://github.com/justbur/emacs-which-key][which-key]] is a package that displays available keybindings in popup.
#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :after evil
  :config
  (gsetq which-key-allow-evil-operators t)
  (which-key-mode))
#+end_src

*** Evil plugins
**** Evil surround
#+begin_src emacs-lisp
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
#+end_src

**** Evil nerdcommenter

#+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :after evil
  :config
  (evilnc-default-hotkeys nil t))
#+end_src

#+begin_src emacs-lisp
(general-spc "ci" #'evilnc-comment-or-uncomment-lines
             "cl" #'evilnc-quick-comment-or-uncomment-to-the-line
             "ll" #'evilnc-quick-comment-or-uncomment-to-the-line
             "cc" #'evilnc-copy-and-comment-lines
             "cp" #'evilnc-comment-or-uncomment-paragraphs
             "cr" #'comment-or-uncomment-region
             "cr" #'comment-or-uncomment-region
             "cv" #'evilnc-toggle-invert-comment-line-by-line
             "."  #'evilnc-copy-and-comment-operator)
#+end_src

**** Evil-org
#+begin_src emacs-lisp
(use-package evil-org
  :after (evil org)
  :diminish evil-org-mode
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src

**** Evil-treemacs
#+begin_src emacs-lisp
(use-package treemacs-evil
  :after treemacs)
#+end_src
**** Evil-snipe

#+begin_src emacs-lisp
(use-package evil-snipe)
#+end_src

*** Vim-like folding with =origami=
#+begin_src emacs-lisp :tangle no
(defun nin-origami-toggle-node ()
   (interactive)
   (save-excursion ;; leave point where it is
    (goto-char (point-at-eol))             ;; then go to the end of line
    (origami-toggle-node (current-buffer) (point))))                 ;; and try to fold

(use-package origami
  :config
    (add-hook 'prog-mode-hook
      (lambda ()
        (gsetq-local origami-fold-style 'triple-braces)
        (origami-mode)
        (origami-close-all-nodes (current-buffer)))))
#+end_src

*** evil bindings for major modes
**** Initial states
#+begin_src emacs-lisp
(evil-set-initial-state 'calc-mode 'emacs)
(evil-set-initial-state 'messages-buffer-mode 'motion)
#+end_src

**** =M-x package-list-packages=

See following [[https://www.reddit.com/r/emacs/comments/7dsm0j/how_to_get_evilmode_hjkl_to_work_inside_mx/][reddit post]] for more.
#+begin_src emacs-lisp
(with-eval-after-load 'evil
  ;; use evil mode in the buffer created from calling `list-packages'.
  (add-to-list 'evil-buffer-regexps '("*Packages*" . normal))
  (with-eval-after-load 'package
  ;; movement keys j,k,l,h set up for free by defaulting to normal mode.
  ;; mark, unmark, install
  (evil-define-key 'normal package-menu-mode-map (kbd "m") #'package-menu-mark-install)
  (evil-define-key 'normal package-menu-mode-map (kbd "u") #'package-menu-mark-unmark)
  (evil-define-key 'normal package-menu-mode-map (kbd "x") #'package-menu-execute)))
#+end_src

**** =image-mode=
#+begin_src emacs-lisp
(evil-define-key 'normal image-mode-map "q" 'quit-window)
#+end_src

**** =help-mode=
#+begin_src emacs-lisp
(evil-define-key 'normal help-mode-map "q" 'quit-window)
#+end_src

* UI/Apperance/Formatting
#+begin_src emacs-lisp
(ignore-errors
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (fset 'menu-bar-open nil))
#+end_src

** Use ~y/n~ instead ~yes/no~
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Disable cursor blinking
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+end_src

** Window title

Show file name and mode in window title:
#+begin_src emacs-lisp
(gsetq-default frame-title-format '("%b (%m) â€” Emacs"))
#+end_src

** Show parens
#+begin_src emacs-lisp
(use-package paren
  :init (show-paren-mode)
  :config (gsetq show-paren-delay 0))
#+end_src

** Trailing whitespaces

#+begin_src emacs-lisp
(gsetq-default whitespace-style '(face trailing spaces space-mark))
(add-hook 'prog-mode-hook (lambda () (gsetq show-trailing-whitespace t)))
(add-hook 'org-mode-hook (lambda () (gsetq show-trailing-whitespace t)))
#+end_src

Activate this to make it available in all other modes:
#+begin_src emacs-lisp :tangle no
(gsetq-default show-trailing-whitespace t)
#+end_src

** Highlight current line
#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src

** Show columns numbers
#+begin_src emacs-lisp
(column-number-mode)
#+end_src

** Show line numbers
#+begin_src emacs-lisp
(gsetq-default display-line-numbers-current-absolute nil
              display-line-numbers 'visual
              display-line-numbers-widen nil
              display-line-numbers-width 2)
#+end_src

Disable in some modes:
#+begin_src emacs-lisp
(add-hook 'org-agenda-mode-hook (lambda () (display-line-numbers-mode -1)))
(add-hook 'artist-mode-hook (lambda () (display-line-numbers-mode -1)))
#+end_src

** =redisplay-dont-pause=
The variable =redisplay-dont-pause=, when set to t, will cause Emacs to fully redraw the display before it processes queued input events.
Futher explantation: https://www.masteringemacs.org/article/improving-performance-emacs-display-engine
#+begin_src emacs-lisp :tangle no
(gsetq redisplay-dont-pause t)
#+end_src

** Modeline configuration
*** Doom Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :config
    (progn
      (set-face-attribute 'doom-modeline-bar nil :background "#3c3836")))
#+end_src

#+begin_src emacs-lisp
(gsetq doom-modeline-height 18)
(gsetq doom-modeline-bar-width 1)
#+end_src

*** Diminish
[[https://github.com/emacsmirror/diminish][diminish]] - plugin to hide minor modes in modeline.
TODO: Should be removed, because not use it after switching to =doom-modeline=.
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

#+begin_src emacs-lisp
(diminish 'abbrev-mode)
(diminish 'auto-revert-mode)
#+end_src

** Color scheme

#+begin_src emacs-lisp
(use-package gruvbox-theme
  :init
  (load-theme 'gruvbox-dark-medium t))
#+end_src

Gruvbox colors for line numbers column:
#+begin_src emacs-lisp
(set-face-attribute 'line-number nil
                    :background "#282828")
(set-face-attribute 'line-number-current-line nil
                    :background "#282828"
                    :foreground "#fabd2f")
#+end_src

** =goto-address-mode=
#+begin_src emacs-lisp
(goto-address-mode 1)
#+end_src

** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Iosevka-12")
#+end_src

** All The Icons
Just donâ€™t forget to use =M-x all-the-icons-install-fonts RET= after install.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :general
  (general-spc "tC" #'rainbow-mode))
#+end_src

* Emacs default options

** Initial buffer
Instead default startup screen open ~*scratch*~ with org-mode:
#+begin_src emacs-lisp
(gsetq inhibit-startup-screen t)
(gsetq initial-scratch-message nil)
(gsetq initial-major-mode 'org-mode)
#+end_src

** scrolloff
#+begin_src emacs-lisp
(gsetq scroll-step 1) ;; Don't center frame
(gsetq scroll-margin 7)
#+end_src

** Work with recent files
#+begin_src emacs-lisp
(use-package recentf
  :init
  (add-hook 'after-init-hook #'recentf-mode)
  (gsetq recentf-max-saved-items 1000)
  :config
  ; (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
  (add-to-list 'recentf-exclude ".cache")
  (add-to-list 'recentf-exclude ".mypy_cache")
  (add-to-list 'recentf-exclude ".ccls-cache")
  (add-to-list 'recentf-exclude ".elfeed")
  (add-to-list 'recentf-exclude "bookmarks")
  (add-to-list 'recentf-exclude "recentf")
  (add-to-list 'recentf-exclude "treemacs/persist.org")
  (add-to-list 'recentf-exclude "url")
  (add-to-list 'recentf-exclude "TAGS")
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'"))
#+end_src

** Undo-tree

There are no standard way to implement persistent undo in Emacs. I use modified solution from [[https://github.com/syl20bnr/spacemacs/issues/774][this issue]].
#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (gsetq undo-tree-auto-save-history t
        undo-tree-history-directory-alist
        `(("." . ,(concat user-emacs-directory "undo"))))
  (unless (file-exists-p (concat user-emacs-directory "undo"))
  (make-directory (concat user-emacs-directory "undo")))
  (global-undo-tree-mode 1))
#+end_src

** Save buffer position after exit
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

** Disable bell
#+begin_src emacs-lisp
(gsetq ring-bell-function 'ignore)
#+end_src

** Custom file
#+begin_src emacs-lisp
(gsetq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file :noerror)
#+end_src

** Tabs

Set default tab width to 2 for all buffers:
#+begin_src emacs-lisp
(gsetq-default tab-width 2)
#+end_src

Use 2 spaces instead of a tab:
#+begin_src emacs-lisp
(gsetq-default tab-width 2 indent-tabs-mode nil)
#+end_src

Indentation cannot insert tabs:
#+begin_src emacs-lisp
(gsetq-default indent-tabs-mode nil)
#+end_src

** Keep backup files in separate directory
#+begin_src emacs-lisp
    (gsetq backup-by-copying t
        create-lockfiles nil
        backup-directory-alist '(("." . "~/.cache/emacs-backups"))
        auto-save-file-name-transforms '((".*" "~/.cache/emacs-backups" t)))
#+end_src

** Confirm before closing Emacs
#+begin_src emacs-lisp :tangle no
(gsetq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Disable auto save
#+begin_src emacs-lisp
(gsetq auto-save-default nil)
#+end_src

** Use system clipboard
#+begin_src emacs-lisp
(gsetq x-select-enable-clipboard t)
#+end_src

** Supress `defadvice' warnings

See [[https://andrewjamesjohnson.com/suppressing-ad-handle-definition-warnings-in-emacs/][this]] post.
#+begin_src emacs-lisp
(gsetq ad-redefinition-action 'accept)
#+end_src

** Choose default external apps

Web-browser:
#+begin_src emacs-lisp
(gsetq browse-url-browser-function 'browse-url-generic
       browse-url-generic-program  "/home/jubnzv/.local/bin/firefox")
#+end_src

** User info

#+begin_src emacs-lisp
(gsetq user-full-name
  (replace-regexp-in-string "\n$" ""
  (shell-command-to-string "git config --get user.name")))
(gsetq user-mail-address
  (replace-regexp-in-string "\n$" ""
  (shell-command-to-string "git config --get user.email")))
#+end_src

* Helm

** Setup

#+begin_src emacs-lisp
(use-package helm
  :init (helm-mode)
  :config
  (helm-autoresize-mode t)

  (gsetq helm-autoresize-max-height 40
         helm-autoresize-min-height 40
         ;; Enable fuzzy matching for helm commands
         helm-M-x-fuzzy-match        t
         helm-buffers-fuzzy-matching t
         helm-recentf-fuzzy-match    t
         helm-semantic-fuzzy-match   t
         helm-imenu-fuzzy-match      t)
  :general
  (general-def '(normal insert)
    "M-x" #'helm-M-x
    "M-y" #'helm-show-kill-ring
    "M-i" #'helm-semantic-or-imenu)

  (general-def helm-map
    "M-k" #'helm-previous-line
    "M-j" #'helm-next-line
    "M-p" #'previous-history-element
    "M-n" #'next-history-element
    "M-l" #'helm-execute-persistent-action)

  (general-spc "ho" #'helm-occur
               "ha" #'helm-apropos
               "hm" #'helm-man-woman
               "hr" #'helm-regexp
               "h'" #'helm-register
               "hC" #'helm-colors
               "ht" #'helm-top
               "hg" #'helm-google-suggest
               "hf" #'helm-find)

  (general-spc "<SPC>" #'helm-M-x
               "xf" #'helm-find-files
               "xr" #'helm-mini
               "b" #'helm-buffers-list))
#+end_src

** Integration with =fasd=
#+begin_src emacs-lisp
(use-package helm-fasd
  :straight (helm-fasd
             :type git
             :host github
             :repo "ajsalminen/helm-fasd")
  :general
  (general-spc "xa" #'helm-fasd))
#+end_src

** Frontend for =describe-bindings=
Basically a drop-in replacement for =describe-bindings=:
#+begin_src emacs-lisp
(use-package helm-descbinds
  :init (helm-descbinds-mode))
#+end_src

** Interface for system package manager
=helm-system-packages= is an helm interface to the package manager of host operating system and *remote systems* as well.
#+begin_src emacs-lisp
(use-package helm-system-packages)
#+end_src

* File system
** Helpers for UNIX

Those functions works like tpope's [[https://github.com/tpope/vim-eunuch][vim-eunuch]] to provide access to common shell commands.

*** Delete current file and buffer
See [[https://emacsredux.com/blog/2013/04/03/delete-file-and-buffer/][this post]].
#+begin_src emacs-lisp
(defun delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (when filename
      (if (vc-backend filename)
          (vc-delete-file filename)
        (progn
          (delete-file filename)
          (message "Deleted file %s" filename)
          (kill-buffer))))))
#+end_src

*** Rename current file and buffer
Source: [[http://steve.yegge.googlepages.com/my-dot-emacs-file][Steve Yegge's .emacs]].
#+begin_src emacs-lisp
(defun rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+end_src

*** Define evil commands
#+begin_src emacs-lisp
(evil-ex-define-cmd "Delele" 'delete-file-and-buffer)
(evil-ex-define-cmd "Rename" 'rename-file-and-buffer)
#+end_src
** Open files with external applications
#+begin_src emacs-lisp
(use-package openwith
  :config
  (openwith-mode t)
  (gsetq openwith-associations '(("\\.pdf\\'" "zathura" (file)))))
#+end_src

** dired-mode

Set human readable units:
#+begin_src emacs-lisp
(gsetq-default dired-listing-switches "-alh")
#+end_src

* Projectile

** Setup
#+begin_src emacs-lisp
(use-package projectile
  :init (projectile-mode)
  :general
  (general-spc
    "pf" #'projectile-find-file
    "pP" #'projectile-find-file-in-known-projects
    "ps" #'projectile-switch-project)
  :config
  (gsetq projectile-enable-caching t
         projectile-project-test-cmd "make test")

  (gsetq projectile-completion-system 'helm)

  (add-to-list 'projectile-globally-ignored-directories ".ccls-cache")
  (add-to-list 'projectile-globally-ignored-directories ".pytest_cache")
  (add-to-list 'projectile-globally-ignored-directories ".mypy_cache")

  (add-to-list 'projectile-globally-ignored-file-suffixes ".o")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".so")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".a")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".la")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".pyc")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".elc")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".jpg")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".jpeg")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".png")

  (projectile-cleanup-known-projects))
#+end_src

** Integration with helm
#+begin_src emacs-lisp
(use-package helm-projectile)
#+end_src

* Version Control

** Magit
#+begin_src emacs-lisp
(use-package magit
  :general
  (general-spc
    "vs" #'magit-status
    "vP" #'magit-pull
    "vb" #'magit-blame)
  :config
  (when (featurep 'ivy)
    (gsetq magit-completing-read-function #'ivy-completing-read)))
#+end_src

** Git Gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :init (global-git-gutter-mode)
  :general
  (general-def '(normal)
    "]v" (list #'git-gutter:next-hunk :jump t)
    "[v" (list #'git-gutter:previous-hunk :jump t))
  (general-spc
    "v=" #'git-gutter:stage-hunk
    "v-" #'git-gutter:revert-hunk)
  :config
  (gsetq git-gutter:modified-sign "~"
         git-gutter:handled-backends '(git)
         git-gutter:update-interval 2))
#+end_src

* org-mode
#+begin_quote
Friends don't let friends use heroin or org-mode.
#+end_quote

** Initialization

*** org modules

Some of org-mode Contributed Packages are already included in default Emacs installation but requires additional loading. See complete list with descriptions [[https://orgmode.org/worg/org-contrib/][here]].

**** Inline tasks

/Inline tasks/ -- TODO entries embedded in text without treating it is an outline heading. See this [[https://orgmode.org/worg/org-faq.html#list-item-as-todo][article]] for more.

#+begin_src emacs-lisp
(gsetq org-inlinetask-show-first-star t)
#+end_src

/Note/: =org-inlinetask.elc= is already included in Emacs 26.1 package from Debian 10.
#+begin_src emacs-lisp
(require 'org-inlinetask)
#+end_src

** General options

Where are my Org files typically located:
#+begin_src emacs-lisp
(gsetq org-directory "~/Org/")
#+end_src

Enable org-indent-mode:
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
#+end_src

Keep track of when a certain TODO item was finished:
#+begin_src emacs-lisp
(gsetq org-log-done 'time)
#+end_src

Enable soft-wrap:
#+begin_src emacs-lisp
(gsetq org-startup-truncated nil)
#+end_src

Show inline images (~file://~ links):
#+begin_src emacs-lisp
(gsetq org-startup-with-inline-images t)
#+end_src

Disable ~evil-auto-indent~ for org-mode. Using to prevent weird =O/o= behaviour when insert after heading:
#+begin_src emacs-lisp
(add-hook 'org-mode-hook (lambda () (gsetq evil-auto-indent nil)))
#+end_src

Set external applications to open exported files:
#+begin_src emacs-lisp
(if (assoc "\\.x?html?\\'" org-file-apps)
  (setcdr (assoc "\\.x?html?\\'" org-file-apps) "/home/jubnzv/.local/bin/firefox %s"))
#+end_src

** org-agenda

Agenda files:
#+begin_src emacs-lisp
(gsetq org-agenda-files (append
                        (list "~/Org/Agenda.org")
                        (file-expand-wildcards "~/Uni/*/Notes.org")))
#+end_src

Pick agenda file with =ivy=:
#+begin_src emacs-lisp
(defun jbz-find-org-agenda-file ()
  "Open file from `org-agenda-files'."
  (interactive)
  (ivy-read "org-agenda-files:" (org-agenda-files)
            :require-match t
            :action (lambda (f)
                      (find-file-other-window f))))
#+end_src

Open Agenda buffer in full window:
#+begin_src emacs-lisp
(gsetq org-agenda-window-setup 'only-window)
#+end_src

** org-capture

Notekeeping with =org-capture= described in [[http://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][Sacha Chua's blog]]. There is also related [[https://www.reddit.com/r/emacs/comments/2qwh8q/org_mode_one_massive_file_or_tons_of_small_ones/][post]] on reddit.

Default file for =org-capture=:
#+begin_src emacs-lisp
(gsetq org-default-notes-file "~/Org/scratch.org")
#+end_src

Capture templates:
#+begin_src emacs-lisp
(gsetq org-capture-templates
      '(("t" "Task"
         entry (file "~/Org/Agenda.org")
         "* TODO %?\n  %i\n  %a")
        ("T" "Task (urgent)"
         entry (file "~/Org/Agenda.org")
         "* TODO %?
DEADLINE: %T
:PROPERTIES:
:WILD_NOTIFIER_NOTIFY_BEFORE: 240,180,120,60
:END:\n"
        :empty-lines 1
        :order 1)
        ("n" "Note"
         entry (file "~/Org/scratch.org")
         "* %?\n")))
#+end_src
There is also useful snippet: =%(org-insert-time-stamp (org-read-date nil t \"+1d\"))=.

** org-refile

See this [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][blogpost]] about refiling.
#+begin_src emacs-lisp
(gsetq org-refile-targets '((("~/Org/Agenda.org"
                             "~/Org/Notes/Work.org") :maxlevel . 2)))
#+end_src

** org-export
*** Beamer
#+begin_src emacs-lisp
(eval-after-load "ox-latex"

  ;; update the list of LaTeX classes and associated header (encoding, etc.)
  ;; and structure
  '(add-to-list 'org-latex-classes
                `("beamer"
                  ,(concat "\\documentclass[presentation]{beamer}\n"
                           "[DEFAULT-PACKAGES]"
                           "[PACKAGES]"
                           "[EXTRA]\n")
                  ("\\section{%s}" . "\\section*{%s}")
                  ("\\subsection{%s}" . "\\subsection*{%s}")
                  ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src

** Links

*** =org-insert-link=
Use HTML title as default description (recipe from [[https://orgmode.org/worg/org-hacks.html][org-hacks]]):
#+begin_src emacs-lisp
(require 'mm-url) ; to include mm-url-decode-entities-string

(defun my-org-insert-link ()
  "Insert org link where default description is set to html title."
  (interactive)
  (let* ((url (read-string "URL: "))
         (title (get-html-title-from-url url)))
    (org-insert-link nil url title)))

(defun get-html-title-from-url (url)
  "Return content in <title> tag."
  (let (x1 x2 (download-buffer (url-retrieve-synchronously url)))
    (save-excursion
      (set-buffer download-buffer)
      (beginning-of-buffer)
      (gsetq x1 (search-forward "<title>"))
      (search-forward "</title>")
      (gsetq x2 (search-backward "<"))
      (mm-url-decode-entities-string (buffer-substring-no-properties x1 x2)))))
#+end_src

** Calendar buffer settings

Set start week on monday:
#+begin_src emacs-lisp
(gsetq calendar-week-start-day 1)
#+end_src

** Functions

Fold everything but the current headline. See this [[https://stackoverflow.com/questions/25161792/emacs-org-mode-how-can-i-fold-everything-but-the-current-headline][stackoverflow question]].
#+begin_src emacs-lisp
(defun org-show-current-heading-tidily ()
  (interactive)  ;Inteactive
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (outline-back-to-heading)
    (unless (and (bolp) (org-on-heading-p))
      (org-up-heading-safe)
      (hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (show-children)))
#+end_src

Recipe from [[https://orgmode.org/worg/org-hacks.html#org98f0887][org-hacks]]:
#+begin_src emacs-lisp
(defun org-back-to-top-level-heading ()
  "Go back to the current top level heading."
  (interactive)
  (or (re-search-backward "^\* " nil t)
      (goto-char (point-min))))
#+end_src

** Keybindings and evil-mode commands

#+begin_src emacs-lisp
(evil-define-key 'normal org-mode-map
  ;; narrow headings
  "<" '(lambda () (interactive) (org-demote-or-promote 1))
  ">" 'org-demote-or-promote
  ;; structure movement and editing
  "gp" 'org-show-current-heading-tidily
  "gP" 'org-back-to-top-level-heading
  "gh" 'counsel-org-goto
  "gt" 'counsel-org-tag)
#+end_src

Use =o= prefix for =org-mode= commands in global scope:
#+begin_src emacs-lisp :tangle no
(general-spc "of" #'jbz-find-org-agenda-file
             "oa" #'org-agenda
             "oc" #'org-capture)
#+end_src

Evil commands:
#+begin_src emacs-lisp
(evil-ex-define-cmd "cal" 'calendar)
#+end_src

Fix org-mode =TAB= in console mode:
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
          (define-key evil-normal-state-map (kbd "TAB") 'org-cycle))) 
#+end_src

** ox-hugo: exporter backend for Hugo
#+begin_src emacs-lisp
(use-package ox-hugo
  :after ox)
#+end_src

** org-babel

PlantUML configuration:
#+begin_src emacs-lisp
(gsetq org-plantuml-jar-path
  (expand-file-name "/usr/share/plantuml/plantuml.jar"))
#+end_src

Ditaa configuration:
#+begin_src emacs-lisp
(gsetq org-ditaa-jar-path
  (expand-file-name "/usr/share/ditaa/ditaa.jar"))
#+end_src

Instantly show generated image:
#+begin_src emacs-lisp
(add-hook 'org-babel-after-execute-hook
          (lambda ()
            (when org-inline-image-overlays
              (org-redisplay-inline-images))))
#+end_src

Don't confirm codeblock evaluation:
#+begin_src emacs-lisp
(gsetq org-confirm-babel-evaluate nil)
#+end_src

Collapse source code blocks when open an org file.
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-hide-block-all)
#+end_src

Setup available languages for =org-babel-execute=:
#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages '(
  (plantuml . t)
  (ditaa . t)
  (latex . t)
  (scheme . t)
  (emacs-lisp . t)
  (shell . t)
  (C . t)
  (python . t)))
#+end_src

** Cross-references with =org-ref=
#+begin_src emacs-lisp
(use-package org-ref
  :defer t
  :config
  (gsetq org-ref-bibliography-notes "~/Org/references_notes.org"
        org-ref-default-bibliography '("~/Documents/references.bib")
        org-ref-pdf-directory "~/Documents/bibtex-pdfs/"))
#+end_src

** Download images to org-mode

How to use it:
+ Image from network:
  1. Copy image URI
  2. Call ~org-download-yank~.
  Image will be saved in ~./img~ directory and embedded in org file.
+ Screenshot with =screengrab=:
  1. Call screengrab
  2. Save selected region in ~/tmp/screenshot.png~
  3. Call ~org-download-screenshot~

*** Custom download function

Thanks to [[https://gist.github.com/daviderestivo/ad3dfa38d3f7266d014ce469aafd18dc][daviderestivo]].

This is an helper function for org-download. It creates an \"./image\" folder within the same directory of the org file.
Images are separated inside that image folder by additional folders one per org file.

/Links/:
+ More info can be found [[https://github.com/abo-abo/org-download/issues/40][here]]
+ Usage example in [[https://github.com/abo-abo/org-download/commit/137c3d2aa083283a3fc853f9ecbbc03039bf397b][commit message]]

#+begin_src emacs-lisp
(defun jubnzv/org-download-method (link)
  (let ((filename
         (file-name-nondirectory
          (car (url-path-and-query
                (url-generic-parse-url link)))))
        (dir (concat
              (file-name-directory (buffer-file-name))
              (format "%s/%s/%s"
                      "img"
                      (file-name-base (buffer-file-name))
                      (org-download--dir-2)))))
    (progn
      (gsetq filename-with-timestamp (format "%s%s.%s"
                                            (file-name-sans-extension filename)
                                            (format-time-string org-download-timestamp)
                                            (file-name-extension filename)))
      ;; Check if directory exists otherwise creates it
      (unless (file-exists-p dir)
        (make-directory dir t))
      (message (format "Image: %s saved!" (expand-file-name filename-with-timestamp dir)))
(expand-file-name filename-with-timestamp dir))))
#+end_src

*** Plugin initialization
#+begin_src emacs-lisp
(use-package org-download
  :config
  (gsetq org-download-method 'jubnzv/org-download-method)
  ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(evil-declare-key 'normal org-mode-map ",Dy" 'org-download-yank)
(evil-declare-key 'normal org-mode-map ",Ds" 'org-download-screenshot)
#+end_src

* Terminal/Shell settings
** Eshell
#+begin_src emacs-lisp
(defun eshell-other-window ()
  "Open a `eshell' in a new window."
  (interactive)
  (let ((buf (eshell)))
    (switch-to-buffer (other-buffer buf))
    (switch-to-buffer-other-window buf)))
#+end_src

*** Popup shell
Function from [[https://github.com/howardabrams/dot-files/][howardabrams/dot-files]]. It makes small popup shell.
#+begin_src emacs-lisp
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))
#+end_src

*** Keybindings
#+begin_src emacs-lisp
(evil-declare-key 'normal global-map "`\\" 'eshell-here)
(evil-declare-key 'normal eshell-mode-map (kbd "M-j") 'eshell-previous-prompt)
(evil-declare-key 'normal eshell-mode-map (kbd "M-k") 'eshell-next-prompt)
#+end_src

*** Aliases
#+begin_src emacs-lisp
(defun eshell/ll (&rest args)
  (eshell/ls "-la" args))
(defun eshell/q (&rest args)
  (eshell/exit args))
(defun eshell/pd (&rest args)
  (eshell/pushd args))
(defun eshell/pdd (&rest args)
  (eshell/popd args))
#+end_src

** =term-mode=
#+begin_src emacs-lisp
(add-hook 'term-mode-hook (lambda ()
  (which-function-mode -1)))
#+end_src

** Run =kitty=
Run =kitty= in current directory:
#+begin_src emacs-lisp
(defun run-kitty-here ()
  (interactive)
  (call-process "kitty" nil 0 nil "-d" (file-name-directory (or load-file-name buffer-file-name))))
#+end_src

** Serial terminal

Configuration options for [[http://kpda.ru/products/kpda00002/][KPDA QNX]]:
#+begin_src emacs-lisp
  (defun jbz-serial-qnx-setup ()
    (interactive)
    (set-buffer-process-coding-system
     'cyrillic-alternativnyj-unix
     'cyrillic-alternativnyj-unix))
#+end_src

* TRAMP
#+begin_src emacs-lisp
(gsetq tramp-default-method "ssh")
#+end_src

* Snippets

Initialize =yasnippet= plugin itself:
#+begin_src emacs-lisp
(use-package yasnippet
  :defer t
  :commands (yas-reload-all yas-minor-mode)
  :config
  (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets"))

  ;(general-spc 'normal snippet-mode-map
  ;  "M-l" #'yas-maybe-expand)

  (yas-global-mode 1))

(general-def
    :keymaps        '(yas-keymap yas/keymap)
    "<tab>"         nil
    "TAB"           nil
    "<backtab>"     nil
    "M-h"           'yas-next-field-or-maybe-expand
    "M-l"           'yas-prev-field)
#+end_src

Extra snippets:
#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet
  :demand t)
#+end_src

* Spell checking

=ispell= can be configured to skip over regions that match regexes.
#+begin_src emacs-lisp
(add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
(add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
#+end_src

* System applications replacement
** IRC
#+begin_src emacs-lisp
(use-package rcirc
  :init
  :config
  (gsetq rcirc-default-nick "jubnzv"
         rcirc-server-alist '(("irc.freenode.net"
                               :channels ("#debian" "#cppcheck")))
         ;; Keep history
         rcirc-log-flag t
         rcirc-log-directory "~/.irc_logs"
         rcirc-log-filename-function #'jbz/log-filename-with-date
         ;; Ignore away/join/part messages from lurkers.
         rcirc-omit-responses '("JOIN" "PART" "QUIT" "NICK" "AWAY"))
  ;; Taken from
  ;; https://github.com/s1n4/dotfiles/blob/master/emacs.d/config/rcirc-config.el
  (defun jbz/log-filename-with-date (process target)
    (format
     "%s_%s.log"
     (if target
         (rcirc-generate-new-buffer-name process target)
       (process-name process))
     (format-time-string "%Y-%m-%d"))))
#+end_src

** Elfeed
#+begin_src emacs-lisp
(use-package elfeed)
#+end_src

* Other formats
** yaml
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

* Programming
** General settings

Here is some common settings and minor mode configurations available in all programming modes.

*** =hs-mode=: folding

+ ~zc~: Fold
+ ~za~: Unfold
+ ~zR~: Unfold everything

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'hs-minor-mode)
#+end_src

*** Display identation levels

Alternative to vim's [[https://github.com/Yggdroot/indentLine][indentLine]] plugin.
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :config
  (gsetq highlight-indent-guides-method 'character)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))
#+end_src

*** TODO ctags

*** =which-func-mode=: display function name in modline

Customize =???= in which-func-mode:
#+begin_src emacs-lisp
(gsetq which-func-unknown "âˆ…")
#+end_src

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook (lambda () (which-function-mode 1)))
#+end_src

***  face
#+begin_src emacs-lisp
(use-package form-feed
  :diminish form-feed-mode
  :config
  (add-hook 'prog-mode-hook 'form-feed-mode))
#+end_src

*** Spaces > tabs
#+begin_src emacs-lisp
(gsetq-default indent-tabs-mode nil)
#+end_src

** Goto definition with =dumb-jump=
#+begin_src emacs-lisp
(use-package dumb-jump
  :general ('normal "gd" #'dumb-jump-go)
  :config
  (gsetq dumb-jump-selector 'helm
         dumb-jump-prefer-searcher 'ag))
#+end_src

** Autocompletion with =company-mode=

Company is a text completion framework for Emacs similar with vim's =deoplete=.
#+begin_src emacs-lisp
(use-package company
  :init (global-company-mode)
  :config
  (gsetq company-tooltip-limit 20
         company-idle-delay 0)

  (defun trishume:company-backend-with-yas (backends)
    "Add :with company-yasnippet to company BACKENDS.
     Taken from https://github.com/syl20bnr/spacemacs/pull/179."
    (if (and (listp backends) (memq 'company-yasnippet backends))
        backends
      (append (if (consp backends)
                  backends
                (list backends))
              '(:with company-yasnippet))))
  ;; Add yasnippet to all backends
  (gsetq company-backends
         (mapcar #'trishume:company-backend-with-yas company-backends))

  (general-def company-active-map
    "M-l" #'company-complete-common-or-cycle
    "M-j" #'company-select-next
    "M-k" #'company-select-previous
    "C-h" nil
    "C-w" nil))
#+end_src

** =flycheck.el= â€” Syntax checking plugin
#+begin_src emacs-lisp
(use-package flycheck
  :diminish "fc")
#+end_src

Jump to errors:
#+begin_src emacs-lisp
(evil-declare-key 'normal prog-mode-map "]e" 'flycheck-next-error)
(evil-declare-key 'normal prog-mode-map "[e" 'flycheck-previous-error)
#+end_src

** DAP

[[https://code.visualstudio.com/api/extension-guides/debugger-extension][DAP]] - is a wire protocol for communication between client and Debug Server. Itâ€™s similar to the LSP but provides integration with debug server.

Note: =ptvsd= must should be installed: =pip install "ptvsd>=4.2"=.

#+begin_src emacs-lisp
(use-package dap-mode
  :config
  (require 'dap-python))
#+end_src

** LSP
*** lsp-mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :config (gsetq lsp-prefer-flymake nil
                 lsp-highlight-symbol-at-point nil))
#+end_src

LSP UI looks too noisy out of box. Disabled for now.
#+begin_src emacs-lisp :tangle no
(use-package lsp-ui
  :commands lsp-ui-mode
  :init (gsetq lsp-ui-doc-enable nil
              lsp-ui-doc-header t
              lsp-ui-doc-include-signature t
              lsp-ui-doc-position 'top
              lsp-ui-doc-use-webkit t
              lsp-ui-doc-border (face-foreground 'default)
              lsp-ui-sideline-enable nil
              lsp-ui-sideline-ignore-duplicate t))
#+end_src

#+begin_src emacs-lisp
(use-package company-lsp :commands company-lsp)
#+end_src

*** Microsoftâ€™s python-language-server
#+begin_src emacs-lisp
(use-package lsp-python-ms
  ; Autostart
  ; :hook (python-mode . lsp)
  :demand)
#+end_src

*** ccls extensions
#+begin_src emacs-lisp
(use-package ccls)
; Autostart
;:hook ((c-mode c++-mode objc-mode) .
;     (lambda () (require 'ccls) (lsp))))
#+end_src

** Languages
*** LISP
Here is my configuration for following languages:
+ Scheme ([[https://www.call-cc.org/][Chicken Scheme]])
+ [[https://racket-lang.org/][Racket]]
+ Emacs lisp

[[https://gitlab.com/jaor/geiser][Geiser]] is an Emacs environment to hack and have fun in Scheme.
#+begin_src emacs-lisp
(use-package geiser
  :config
  (gsetq geiser-active-implementations '(chicken)))
#+end_src

Use [[https://wiki.call-cc.org/][Chicken Scheme]] as default implementation:
#+begin_src emacs-lisp
(gsetq scheme-program-name "csi -:c")
#+end_src

For Racket, [[https://github.com/greghendershott/racket-mode][racket-mode]] looks more interesring because it provides more Racket REPL interraction routines.
#+begin_src emacs-lisp
(use-package racket-mode
  :config
  (modify-syntax-entry ?- "w" racket-mode-syntax-table)
  (modify-syntax-entry ?- "w" racket-repl-mode-syntax-table))
#+end_src

**** Some general settings

Treat dash as part of word:
#+begin_src emacs-lisp
(modify-syntax-entry ?- "w" emacs-lisp-mode-syntax-table)
#+end_src

Display Lambda as Î» (see [[http://ergoemacs.org/emacs/emacs_pretty_lambda.html][this]] article):
#+begin_src emacs-lisp
(defun my-add-pretty-lambda ()
  "Make some word or string show as pretty Unicode symbols"
  (gsetq prettify-symbols-alist
        '(("lambda" . 955)
          ("->" . 8594)
          ("=>" . 8658)
          ("map" . 8614)))
          (prettify-symbols-mode))

(add-hook 'emacs-lisp-mode-hook 'my-add-pretty-lambda)
(add-hook 'geiser-mode-hook 'my-add-pretty-lambda)
(add-hook 'racket-mode-hook 'my-add-pretty-lambda)
(add-hook 'racket-repl-mode-hook 'my-add-pretty-lambda)
#+end_src

**** Lispy & LispyVille

[[https://github.com/abo-abo/lispy][Lispy]] is vi-inspired plugin that provides useful keybindings for editing LISP sources. It looks pretty interesting, but unfamiliar for me as native vim user. So, my choice is [[https://github.com/noctuid/lispyville][LispyVille]] that serve as a minimal layer on top of lispy-mode for better integration with evil.
#+begin_src emacs-lisp
(use-package lispy)

(use-package lispyville
  :init
  (add-hook 'racket-mode-hook 'lispyville-mode)
  (add-hook 'geiser-mode-hook 'lispyville-mode)
  (add-hook 'racket-repl-mode-hook 'lispyville-mode)
  (add-hook 'emacs-lisp-mode-hook 'lispyville-mode))
#+end_src

**** Rainbow delimiters

=rainbow-delimiters= mode is too distracting to use for languages other than Lisp.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :commands (rainbow-delimiters-mode rainbow-delimiters)
  :init
  (add-hook 'racket-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'racket-repl-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'geiser-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+end_src

*** Verilog
#+begin_src emacs-lisp
(use-package verilog-mode
  :config
  (gsetq verilog-auto-newline           nil
         verilog-auto-indent-on-newline t
         verilog-tab-always-indent      t
         verilog-tab-to-comment         nil))
#+end_src

*** C/C++
**** Common
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook '(lambda ()
  (gsetq indent-tabs-mode t
     c-basic-offset 4
     tab-width 4)
  ;; vim's :A
  (local-set-key  (kbd "M-a") 'ff-find-other-file)
  (which-function-mode 1) ;; show function name in modeline
  (flycheck-mode)
  (yas-reload-all)
  (yas-minor-mode)))
#+end_src

#+begin_src emacs-lisp
(modify-syntax-entry ?- "w" c-mode-syntax-table)
(modify-syntax-entry ?_ "w" c-mode-syntax-table)
#+end_src

**** Explore C/C++ code

=distater=: disassemble C/C++ code under cursor:
#+begin_src emacs-lisp
(use-package disaster)
#+end_src

#+begin_src emacs-lisp
(defun jbz-objdump-file ()
  (interactive)
  (gsetq file (expand-file-name (read-file-name "File: ")))
  (shell-command (concat "objdump -D -M intel " file) "*objdump*"))
#+end_src

#+begin_src emacs-lisp
(defun jbz-objdump-lib-symbols ()
  (interactive)
  (gsetq file (expand-file-name (read-file-name "File: ")))
  (shell-command (concat "objdump -TC " file) "*objdump*"))
#+end_src

#+begin_src emacs-lisp
(defun jbz-readelf-so ()
  (interactive)
  (gsetq file (expand-file-name (read-file-name ".so: ")))
  (shell-command (concat "readelf -S " file) "*readelf*"))
#+end_src

*** Rust
[[https://github.com/brotzeit/rustic][rustic]] - Rust development environment for Emacs. =org-babel= integration it's his strength.
#+begin_src emacs-lisp
(use-package rustic)
#+end_src

#+begin_src emacs-lisp
(add-hook 'rust-mode-hook '(lambda()
  (which-function-mode 1)
  (flycheck-mode)
  (yas-reload-all)
  (yas-minor-mode)))
#+end_src

#+begin_src emacs-lisp
(evil-declare-key 'normal rust-mode-map ",Ef" 'rust-format-buffer)
#+end_src

**** Integration with =clang-format=

#+begin_src emacs-lisp
(use-package clang-format
  :general
  (general-spc "lf" #'clang-format-buffer))
#+end_src

*** Python
#+begin_src emacs-lisp :tangle no
(modify-syntax-entry ?- "w" python-mode-syntax-table)
(modify-syntax-entry ?_ "w" python-mode-syntax-table)
#+end_src

* Utilities/Configuration/Help

** Better *help* buffer with =helpful=
#+begin_src emacs-lisp
(use-package helpful
  :general
  (general-def help-map
    "K" #'helpful-at-point
    "RET" #'helpful-visit-reference)
  :config
  (general-def 'normal helpful-mode
    :definer 'minor-mode
    "q" #'quit-window))

#+end_src
** Profile startup with =ESUP=
#+begin_src emacs-lisp
(use-package esup)
#+end_src

** Re-create a =*scratch*=

Re-create a =*scratch*= buffer (see [[https://www.emacswiki.org/emacs/RecreateScratchBuffer][EmacsWiki: Recreate Scratch Buffer]]):
#+begin_src emacs-lisp
(defun create-scratch-buffer nil
   "create a scratch buffer"
   (interactive)
   (switch-to-buffer (get-buffer-create "*scratch*"))
   (org-mode))
#+end_src

** Track frequently used commands with ~keyfreq~

The frequently used commands should be assigned efficient key bindings.
See this [[http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html][post]] by Bin Chen.

See generated report with ~keyfreq-html~.

#+begin_src emacs-lisp
(use-package keyfreq
  :config
  ; Exclude most common commands
  (gsetq keyfreq-excluded-commands
      '(forward-char
        backward-char
        previous-line
        next-line
	save-buffer
  ; See: http://emacshorrors.com/posts/self-insert-command.html
	; self-insert-command
  self-insert-command
	org-self-insert-command
  ; ivy
  ivy-next-line
	; Evil
	evil-delete-backward-char-and-join
  evil-previous-visual-line
  evil-next-visual-line
	evil-normal-state
	evil-jump-backward
	evil-forward-char
	evil-backward-char
	evil-org-delete-char
	evil-insert
	evil-previous-line
	evil-next-line
	evil-ex-nohighlight
	evil-forward-word-begin
	evil-backward-word-begin))
  (gsetq keyfreq-file "~/.emacs.d/keyfreq"
	keyfreq-file-lock "~/.emacs.d/keyfreq.lock")
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src

** Instant access to Emacs configuration files
#+begin_src emacs-lisp
(defun open-config-file (file-path)
  "Open file from ~/.emacs.d in another window."
  (interactive)
  (find-file-other-window (expand-file-name file-path user-emacs-directory)))
#+end_src


#+begin_src emacs-lisp
(which-key-add-key-based-replacements "SPC R" "Configure Emacs")
(which-key-add-key-based-replacements "SPC R c" "reload config")
(general-spc "Rc" (lambda() (interactive)(load-file "~/.emacs.d/init.el")))
#+end_src

** Emacs daemon hooks

Following lines are required to load theme when using =emacsclient -c=.
See [[https://stackoverflow.com/questions/18904529/after-emacs-deamon-i-can-not-see-new-theme-in-emacsclient-frame-it-works-fr][this]] stackoverflow for explantations.

#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions (lambda (frame)
                        (when (eq (length (frame-list)) 2)
                            (progn
                              (select-frame frame)
                              (load-theme 'gruvbox-dark-medium)))))
  (load-theme 'gruvbox-dark-medium  1))
#+end_src
